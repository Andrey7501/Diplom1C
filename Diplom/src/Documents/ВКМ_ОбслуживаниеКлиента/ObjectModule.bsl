

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

 Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	 
	 Если НЕ ЗначениеЗаполнено(Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить()) Тогда
		 Отказ = Истина;
		 ОбщегоНазначения.СообщитьПользователю("Не заполнена константа НоменклатураРаботыСпециалиста");
		 Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить()) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Не заполнена константа НоменклатураАбонентскаяПлата");
		Возврат;
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВидДоговора, ВКМ_Дата, ВКМ_СрокДействия, ВКМ_СтоимостьЧасаРаботы");
	
	Если РеквизитыДоговора.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Договор не является договором на Абонентское обслуживание. Необходимо выбрать другой договор или изменить Вид договора на Абонентское обслуживание");
		Возврат;
	КонецЕСли;
	
	Если РеквизитыДоговора.ВКМ_Дата > Дата ИЛИ РеквизитыДоговора.ВКМ_СрокДействия < Дата Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Дата документа не совпадает с периодом действия договора. Укажите актуальную дату");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Специалист);
	
	Выборка = Запрос.Выполнить();
	
	//Если Выборка.Пустой() Тогда
	//	Отказ = Истина;
	//	ОбщегоНазначения.СообщитьПользователю("Не заполнены УсловияОплатыСотрудников");
	//	Возврат;
	//КонецЕсли;
	
	РезультатЗапроса = Выборка.Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		УсловияОплатыСотрудников = РезультатЗапроса.ПроцентОтРабот;
	КонецЦикла;
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	
	Для Каждого ТекСтрВыполненныеРаботы ИЗ ВыполненныеРаботы Цикл
		СтоимостьЧасаРаботыСпециалиста = РеквизитыДоговора.ВКМ_СтоимостьЧасаРаботы;
		
		//движения по регистру ВКМ_ВыполненныеКлиентуРаботы
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		//Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ТекСтрВыполненныеРаботы.ЧасыКОплатеКлиенту;
		Движение.СуммаКОплате = СтоимостьЧасаРаботыСпециалиста * ТекСтрВыполненныеРаботы.ЧасыКОплатеКлиенту;
		
		//движения по регистру ВКМ_ВыполненныеСотрудникомРаботы
        Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		//Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Сотрудник = Специалист;
		Движение.ЧасовКОплате = ТекСтрВыполненныеРаботы.ЧасыКОплатеКлиенту;
		Движение.СуммаКОплате = СтоимостьЧасаРаботыСпециалиста * УсловияОплатыСотрудников * ТекСтрВыполненныеРаботы.ЧасыКОплатеКлиенту / 100;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверкаУсловийОплатыСотрудников(ДатаДокумента, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад КАК Оклад,
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Период, Сотрудник = &Сотрудник) 
		|		КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ДатаДокумента);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УсловияОплаты = Новый Структура;
	УсловияОплаты.Вставить("ЗаписьСуществует", Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		УсловияОплаты.Вставить("ЗаписьСуществует", Истина);
		УсловияОплаты.Вставить("ПроцентОтРабот", Выборка.ПроцентОтРабот);
	КонецЦикла;
	
	Возврат УсловияОплаты;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляУведомления = Новый Структура("НовыйДокумент, Дата, Время, Специалист");
	
	Если ЭтоНовый() Тогда
		Сообщение = СобратьСообщениеБоту(ОписаниеПроблемы, Комментарий, Специалист, Клиент, ДатаПроведенияРабот, 
										 ВремяНачалаРаботы, ВремяОкончанияРабот);
		СоздатьСообщениеБоту(Сообщение);
	Иначе
		ДокументИзменен = Ложь;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Специалист, Клиент, ДатаПроведенияРабот, ВремяНачалаРаботы,
																	  | ВремяОкончанияРабот, ОписаниеПроблемы, Комментарий");
		Сообщение = СобратьСообщениеБоту(Реквизиты.ОписаниеПроблемы, Реквизиты.Комментарий, Реквизиты.Специалист, Реквизиты.Клиент,
					                     Реквизиты.ДатаПроведенияРабот, Реквизиты.ВремяНачалаРаботы, Реквизиты.ВремяОкончанияРабот);
										 
		Если Реквизиты.Специалист <> Специалист Тогда
			ДокументИзменен = Истина;
			Сообщение = Сообщение + Символы.ПС + "Изменен специалист, выполняющий работы";
		КонецЕсли;
		Если Реквизиты.ДатаПроведенияРабот <> ДатаПроведенияРабот Тогда
			ДокументИзменен = Истина;
			Сообщение = Сообщение + Символы.ПС + "Изменена дата проведения работ.";
		КонецЕсли;
		Если Реквизиты.ВремяНачалаРаботы <> ВремяНачалаРаботы Тогда
			ДокументИзменен = Истина;
			Сообщение = Сообщение + Символы.ПС + "Изменено время начала работы";
		КонецЕсли;
		Если Реквизиты.ВремяОкончанияРабот <> ВремяОкончанияРабот Тогда
			ДокументИзменен = Истина;
			Сообщение = Сообщение + Символы.ПС + "Изменено время окончания работ";
		КонецЕсли;

		Если ДокументИзменен Тогда
			СоздатьСообщениеБоту(Сообщение);
		КонецЕсли;		
	КонецЕсли;
											 
КонецПроцедуры 

Функция СобратьСообщениеБоту(ОписаниеПроблемы, Комментарий, Специалист, Клиент, ДатаПроведенияРабот, ВремяНачалаРаботы, ВремяОкончанияРабот) Экспорт
		
	Если ЗначениеЗаполнено(ОписаниеПроблемы) Тогда
		Сообщение = "Задача." + Символы.ПС + ОписаниеПроблемы + Символы.ПС;
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			Сообщение = Сообщение + "Коментарий." + Символы.ПС + Комментарий + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Специалист) Тогда
			Сообщение = СтрШаблон("Исполнитель: %1." + Символы.ПС + "Клиент: %2", ВРег(Специалист), Клиент) + Символы.ПС + Символы.ПС + Сообщение;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаПроведенияРабот) Тогда
			Сообщение = Сообщение + Символы.ПС + СтрШаблон("Дата проведения работ: %1", Формат(ДатаПроведенияРабот, "ДЛФ=DD;"));
		КонецЕсли;
		Если ЗначениеЗаполнено(ВремяНачалаРаботы) Тогда
			Сообщение = Сообщение + СтрШаблон(" с %1", Формат(ВремяНачалаРаботы, "ДЛФ=T;"));
		КонецЕсли;
		Если ЗначениеЗаполнено(ВремяОкончанияРабот) Тогда
			Сообщение = Сообщение + СтрШаблон(" до %1.", Формат(ВремяОкончанияРабот, "ДЛФ=T;"));
		КонецЕсли;
		
		Сообщение = Сообщение + Символы.ПС + Символы.ПС +СтрШаблон("Сообщение отправлено: %1.", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Процедура СоздатьСообщениеБоту(Сообщение) Экспорт
	СправочникОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
	СправочникОбъект.ТекстСообщения = Сообщение;
	СправочникОбъект.Записать();
КонецПроцедуры

#КонецОбласти

#КонецЕсли


