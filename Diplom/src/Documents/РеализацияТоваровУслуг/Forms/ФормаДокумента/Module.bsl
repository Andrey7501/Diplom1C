
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//{{Козырев А.Е.: Добавить кнопку Заполнить
	ВКМ_ДобавитьКнопкуЗаполнить();
	//Козырев А.Е.}}
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

//{{Козырев А.Е.:
//Добавление команды Заполнить, которая проверяет вид договора. Если это договор 
//абонентского обслуживания, то она должна вызывать процедуру ВыполнитьАвтозаполнение 
//из модуля объекта документа
 &НаСервере
 Процедура ВКМ_ДобавитьКнопкуЗаполнить()
	 
	 СформироватьТабл = Команды.Добавить("Заполнить");
	 СформироватьТабл.Действие = "ВКМ_КомандаЗаполнить";
	 СформироватьТабл.Заголовок = "Заполнить";
	 
	 КнопкаСформироватьТабл = Элементы.Добавить("КнопкаСформироватьТабл", Тип("КнопкаФормы"), Элементы.ФормаКоманднаяПанель);
	 КнопкаСформироватьТабл.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	 КнопкаСформироватьТабл.ИмяКоманды = "Заполнить";
	 
 КонецПроцедуры

 &НаКлиенте
 Процедура ВКМ_КомандаЗаполнить(Команда)
	 
	 Если Объект.Услуги.Количество() > 0 Тогда
		 ТекстВопроса = НСтр("ru = Перед заполнением таблица будет очищена. Продолжить заполнение?");
		 Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТЧ", ЭтотОбъект);
		 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, Заголовок);
	 Иначе
		 ВКМ_ЗаполнитьДокумент();
	КонецЕсли;
	 
КонецПроцедуры

 &НаКлиенте
 Процедура ВопросПередЗаполнениемТЧ(Результат, ДополнительныеПараметры) Экспорт
	 
	 Если Результат = КодВозвратаДиалога.ОК Тогда
		 Объект.Услуги.Очистить();
		 ВКМ_ЗаполнитьДокумент();
	 КонецЕсли;
	 
 КонецПроцедуры
 
  &НаСервере
  Процедура ВКМ_ЗаполнитьДокумент()
	  
	НоменклатураАбонентскаяПлата = Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить();
	НоменклатураРаботыСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();
	
	Если НЕ ЗначениеЗаполнено(НоменклатураАбонентскаяПлата) Тогда
		
		ВызватьИсключение("Не заполнено значение константы Номенклатура Абонентская плата");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоменклатураРаботыСпециалиста) Тогда
		
		ВызватьИсключение("Не заполнено значение константы Номенклатура Работы специалиста");
		
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВидДоговора, ВКМ_Дата, ВКМ_СрокДействия");
	
	Если РеквизитыДоговора.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
		
		ВызватьИсключение("Договор не является договором на абонентское обслуживание. Выберите другой договор или измените Вид договора на Абонентское обслуживание.");
		
	КонецЕсли;
	
	Если РеквизитыДоговора.ВКМ_Дата > Объект.Дата ИЛИ РеквизитыДоговора.ВКМ_СрокДействия < Объект.Дата Тогда
		
		ВызватьИсключение("Дата документа не входит в период действия договора. Укажите другую дату.");
		
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ВКМ_ВыполнитьАвтозаполнение(ДокументОбъект.Договор);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	Модифицированность = Истина;

  КонецПроцедуры

//Козырев А.Е.}}


#Область ПодключаемыеКоманды

 //СтандартныеПодсистемы.ПодключаемыеКоманды
 &НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения); 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
